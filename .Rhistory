---
title: "Blog"
n_genes <- 200
fraction <- 0.25
max_sigma.sq <- 2
low_range_beta <- c(0.5,2)
high_range_beta <- c(4,8)
fraction*n_genes
set.seed(1)
sigma.sq <- runif(50, 1, 2)
set.seed(1)
beta <- runif(25, 0.5, 4)
beta <- append(beta, runif(25, 4, 8))
plot(sigma.sq, beta)
set.seed(1)
alpha <- rnorm(50, 1, 2)
set.seed(1)
beta <- rnorm(25, 0.5, 4)
beta <- append(beta, rnorm(25, 4, 8))
plot(alpha, beta)
set.seed(1)
alpha <- rnorm(50, 1, 2)
set.seed(1)
beta <- rnorm(25, 0.5, 2)
beta <- append(beta, rnorm(25, 4, 8))
plot(alpha, beta)
set.seed(1)
alpha <- rnorm(50, 1, 2)
set.seed(1)
beta <- rnorm(25, 0.5, 2)
beta <- append(beta, rnorm(25, 2, 4))
plot(alpha, beta)
set.seed(1)
alpha <- rnorm(50, 5, 3)
set.seed(1)
beta <- rnorm(25, 0.5, 2)
beta <- append(beta, rnorm(25, 2, 4))
plot(alpha, beta)
set.seed(1)
alpha <- runif(50, 5, 3)
set.seed(1)
beta <- runif(25, 0.5, 2)
beta <- append(beta, runif(25, 2, 4))
plot(alpha, beta)
set.seed(1)
alpha <- runif(50, 1, 2)
set.seed(1)
beta <- runif(25, 0.5, 4)
beta <- append(beta, runif(25, 4, 8))
plot(alpha, beta)
set.seed(100)
vals1 <- rnorm(100, mean = 3, sd = 1)
set.seed(100)
vals2 <- rnorm(100, mean = 0.5, sd = 10)
plot(vals1, vals2)
set.seed(9)
normal <- rnorm(100)
set.seed(9)
uniform <- runif(100)
plot(normal, uniform)
set.seed(100)
vals1 <- rnorm(100, mean = 3, sd = 1)
set.seed(100)
vals2 <- rnorm(100, mean = 0.5, sd = 10)
plot(vals1, vals2)
cor(vals1, vals2)
cor(vals1, vals2)
cor(normal, uniform)
set.seed(9)
normal <- rnorm(100)
set.seed(9)
uniform <- runif(100)
plot(normal, uniform)
cor(normal, uniform)
for(i in c(1:50)){
print(i)
}
correlation_list <- c()
for(i in c(1:50)){
print(i)
set.seed(i)
vals1 <- rnorm(100, mean = i, sd = 1)
set.seed(i)
vals2 <- rnorm(100, mean = 0.5, sd = i)
correlation_list <- append(correlation_list, cor(vals1, vals2))
}
correlation_list <- c()
for(i in c(1:50)){
set.seed(i)
vals1 <- rnorm(100, mean = i, sd = 1)
set.seed(i)
vals2 <- rnorm(100, mean = 0.5, sd = i)
correlation_list <- append(correlation_list, cor(vals1, vals2))
}
correlation_list
set.seed(100)
vals1 <- rnorm(100, mean = 3, sd = 1)
set.seed(100)
vals2 <- rnorm(100, mean = 0.5, sd = 10)
plot(vals1, vals2)
cor(vals1, vals2)
set.seed(1)
alpha <- runif(50, 1, 2)
set.seed(1)
beta <- runif(25, 0.5, 4)
beta <- append(beta, runif(25, 4, 8))
plot(alpha, beta)
cor(alpha, beta)
set.seed(1)
alpha <- runif(50, 1, 2)
set.seed(1)
beta <- runif(25, 0.5, 4)
beta <- append(beta, runif(25, 4, 8))
plot(alpha[1:25], beta[1:25])
cor(alpha[26:50], beta[26:50])
set.seed(1)
alpha <- runif(50, 1, 2)
set.seed(1)
beta <- runif(25, 0.5, 4)
beta <- append(beta, runif(25, 4, 8))
plot(alpha, beta)
cor(alpha[1:25], beta[1:25])
cor(alpha[26:50], beta[26:50])
copilot
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 6
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
gene_expr <- gene_expr + runif(num_genes * num_samples, min = 0, max = 0.1)
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 5, max = 8)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values",
sub = "p-value histogram for final iteration")
# plot FDR vs significance
plot(alpha_levels, fdr_percent_avg, type = "l",
xlab = "significance level", ylab = "average FDR (%)",
main = "FDR vs significance level",
ylim = c(-10, 10))
lines(alpha_levels, fdr_percent_avg + fdr_percent_sd, lty = 2)
lines(alpha_levels, fdr_percent_avg - fdr_percent_sd, lty = 2)
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 10
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
gene_expr <- gene_expr + runif(num_genes * num_samples, min = 0, max = 0.1)
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 5, max = 8)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values",
sub = "p-value histogram for final iteration")
# plot FDR vs significance
plot(alpha_levels, fdr_percent_avg, type = "l",
xlab = "significance level", ylab = "average FDR (%)",
main = "FDR vs significance level",
ylim = c(-10, 10))
lines(alpha_levels, fdr_percent_avg + fdr_percent_sd, lty = 2)
lines(alpha_levels, fdr_percent_avg - fdr_percent_sd, lty = 2)
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 20
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 5, max = 8)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values",
sub = "p-value histogram for final iteration")
# plot FDR vs significance
plot(alpha_levels, fdr_percent_avg, type = "l",
xlab = "significance level", ylab = "average FDR (%)",
main = "FDR vs significance level",
ylim = c(-10, 10))
lines(alpha_levels, fdr_percent_avg + fdr_percent_sd, lty = 2)
lines(alpha_levels, fdr_percent_avg - fdr_percent_sd, lty = 2)
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 6
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 5, max = 8)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values")
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 20
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 1, max = 2)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values")
# simulate gene expression data for 1000 genes and 20 samples
# repeat for 100 iterations
set.seed(3)
num_iterations <- 100
alpha_levels <- seq(0.001, 0.1, by = 0.001)
num_genes <- 1000
num_de_genes <- 100
num_samples <- 20
num_half_samples <- num_samples / 2
fdr_percent_df <- data.frame(matrix(0, nrow = num_iterations, ncol = length(alpha_levels)))
for (i in 1:num_iterations) {
# generate gene expression data
# use individual lambda for each gene
lambda <- runif(num_genes, min = 5, max = 8)
gene_expr <- matrix(0, nrow = num_genes, ncol = num_samples)
for (k in 1:num_genes) {
gene_expr[k, ] <- rpois(num_samples, lambda =  lambda[i])
}
de_genes <- sample(1:num_genes, num_de_genes)
fold_change <- runif(num_de_genes, min = 5, max = 8)
for (j in 1:num_de_genes) {
gene_expr[de_genes[j], 1:num_half_samples] <- gene_expr[de_genes[j], 1:num_half_samples] * fold_change[j]
}
gene_expr <- data.frame(gene_expr)
# create indicator for DE genes
gene_expr$is_de <- FALSE
gene_expr$is_de[de_genes] <- TRUE
p_values <- apply(gene_expr, 1, function(x) {
t_test <- t.test(x[1:num_half_samples], x[num_half_samples+1:num_samples])
t_test$p.value
})
gene_expr$p_values <- p_values
adj_p_values <- p.adjust(p_values,  method = "fdr")
gene_expr$adj_p_values <- adj_p_values
fdr_percent <- sapply(alpha_levels, function(alpha) {
num_positive_tests <- sum(adj_p_values <= alpha)
# calculate the number of false positives as the number of non DE genes with adjusted p-value <= alpha
num_false_positives <- sum(gene_expr$adj_p_values[!gene_expr$is_de] <= alpha)
if (num_positive_tests > 0) {
fdr <- num_false_positives / num_positive_tests * 100
} else {
fdr <- 0
}
return(fdr)
})
fdr_percent_df[i, ] <- fdr_percent
}
fdr_percent_avg <- colMeans(fdr_percent_df)
fdr_percent_sd <- apply(fdr_percent_df, 2, sd)
# plot unadjusted p-values
hist(gene_expr$p_values, breaks = 100, xlab = "p-value", main = "unadjusted p-values",
sub = "p-value histogram for final iteration")
# plot FDR vs significance
plot(alpha_levels, fdr_percent_avg, type = "l",
xlab = "significance level", ylab = "average FDR (%)",
main = "FDR vs. significance level",
ylim = c(-3, 10))
lines(alpha_levels, fdr_percent_avg + fdr_percent_sd, lty = 2)
lines(alpha_levels, fdr_percent_avg - fdr_percent_sd, lty = 2)
